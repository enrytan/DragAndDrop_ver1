
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>DnD1</title>

    <style>
        /* Prevent the text contents of draggable elements from being selectable. */
        [draggable] {
            -moz-user-select: none;
            -khtml-user-select: none;
            -webkit-user-select: none;
            user-select: none;
            /* Required to make elements draggable in old WebKit */
            -khtml-user-drag: element;
            -webkit-user-drag: element;
        }

        .column {
            height: 150px;
            width: 150px;
            /*float: left;*/
            border: 1px dashed #666666;
            /*background-color: #ccc;*/
            cursor: move;
            margin:5px;
        }

        .column2 {
            height: 150px;
            width: 150px;
            /*float: left;*/
            border: 1px dashed #666666;
        }

        .box {
            width:100%;
            height:100%;
            background:#0094ff;
            text-align:center;
        }

        .column.over {
            box-shadow: 0 0 10px #ff0000;;
        }

    </style>
</head>
<body>
    <div style="width:50%;">
        <div id="columns" style="float:left;">
            <div class="column" draggable="true"><div id="A" class="box">A</div></div>
            <div class="column" draggable="true"><div id="B" class="box">B</div></div>
            <div class="column" draggable="true"><div id="C" class="box">C</div></div>
        </div>

        <div id="columns" style="float:right;">
            <div class="column" draggable="true"></div>
            <div class="column" draggable="true"></div>
            <div class="column" draggable="true"></div>
        </div>
    </div>
</body>

<script>
    var dragSrcEl = null;

    function handleDragStart(e) {
        // Target (this) element is the source node.  $('#leftmenu').is(':empty') 
        //if (!this.is(':empty')) {
            this.style.opacity = '0.4';

            dragSrcEl = this;

            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', this.innerHTML);
        
    }

    function handleDragOver(e) {
        if (e.preventDefault) {
            e.preventDefault(); // Necessary. Allows us to drop.
        }

        e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.

        return false;
    }

    function handleDragEnter(e) {
        // this / e.target is the current hover target.
        this.classList.add('over');
    }

    function handleDragLeave(e) {
        this.classList.remove('over');  // this / e.target is previous target element.
    }

    function handleDrop(e) {
        // this/e.target is current target element.

        if (e.stopPropagation) {
            e.stopPropagation(); // Stops some browsers from redirecting.
        }

        // Don't do anything if dropping the same column we're dragging.
        if (dragSrcEl != this) {
            // Set the source column's HTML to the HTML of the column we dropped on.
            dragSrcEl.innerHTML = this.innerHTML;
            this.innerHTML = e.dataTransfer.getData('text/html');
        }

        return false;
    }

    function handleDragEnd(e) {
        // this/e.target is the source node.
        this.style.opacity = '1';  // this / e.target is the source node.

        [].forEach.call(cols, function (col) {
            col.classList.remove('over');
        });
    }

    var cols = document.querySelectorAll('#columns .column');
    [].forEach.call(cols, function (col) {
        col.addEventListener('dragstart', handleDragStart, false);
        col.addEventListener('dragenter', handleDragEnter, false)
        col.addEventListener('dragover', handleDragOver, false);
        col.addEventListener('dragleave', handleDragLeave, false);
        col.addEventListener('drop', handleDrop, false);
        col.addEventListener('dragend', handleDragEnd, false);
    });


</script>
</html>
