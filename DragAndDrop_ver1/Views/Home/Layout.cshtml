

<style>
    /* Prevent the text contents of draggable elements from being selectable. */
    [draggable] {
        -moz-user-select: none;
        -khtml-user-select: none;
        -webkit-user-select: none;
        user-select: none;
        /* Required to make elements draggable in old WebKit */
        -khtml-user-drag: element;
        -webkit-user-drag: element;
        /*cursor: move;*/
    }

    .a {
        background:#ccc;
        height:10vh;
    }

    .b{
        background:#999;
        height:10vh;
    }

    .c{
        background:#808080;
        height:80vh;
    }

    .d{
        background:#666;
        height:80vh;
    }

    #grid .col-md-3 {
        height:100px;
        border:1px dashed;
    }

    .source {
        height: 150px;
        width: 150px;
        border: 1px dashed #000;
        cursor: move;
        margin:5px;
    }

    .target {
        padding:0px;
    }

    .target.over, .source.over {
        box-shadow: 0 0 10px #ff0000;
    }

    .box {
        background:#0094ff;
        width:100%;
        height:100%;
    }

</style>



<div class="container-fluid">
    <div class="row">
        <div class="col-md-3 a">
            <h4>Widget</h4>
        </div>
        <div class="col-md-9 b">
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 c">
            <div class="row">
                <div class="col-md-12">
                    <div class="source" draggable="true"><div id="A" class="box">A</div></div>
                    <div class="source" draggable="true"><div id="B" class="box">B</div></div>
                    <div class="source" draggable="true"><div id="C" class="box">C</div></div>
                </div>
            </div>
        </div>
        <div class="col-md-9 d" id="grid">
            <div class="row">
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
            </div>
            <div class="row">
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
                <div class="col-md-3 target" draggable="true">
                </div>
            </div>
        </div>
    </div>
</div>    

<script>
    var dragSrcEl = null;

    function handleDragStart(e) {
        // Target (this) element is the source node.  $('#leftmenu').is(':empty')
        //if (!this.is(':empty')) {
        this.style.opacity = '0.4';

            dragSrcEl = this;

            e.dataTransfer.effectAllowed = 'move';
            e.dataTransfer.setData('text/html', this.innerHTML);

    }

    function handleDragOver(e) {
        if (e.preventDefault) {
            e.preventDefault(); // Necessary. Allows us to drop.
        }

        e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.

        return false;
    }

    function handleDragEnter(e) {
        // this / e.target is the current hover target.
        this.classList.add('over');
    }

    function handleDragLeave(e) {
        this.classList.remove('over');  // this / e.target is previous target element.
    }

    function handleDrop(e) {
        // this/e.target is current target element.

        if (e.stopPropagation) {
            e.stopPropagation(); // Stops some browsers from redirecting.
        }

        // Don't do anything if dropping the same column we're dragging.
        if (dragSrcEl != this) {
            // Set the source column's HTML to the HTML of the column we dropped on.
            dragSrcEl.innerHTML = this.innerHTML;
            this.innerHTML = e.dataTransfer.getData('text/html');
        }

        return false;
    }

    function handleDragEnd(e) {
        // this/e.target is the source node.
        this.style.opacity = '1';  // this / e.target is the source node.

        [].forEach.call(cols, function (col) {
            col.classList.remove('over');
        });
    }

    var cols = document.querySelectorAll('.source');
    [].forEach.call(cols, function (col) {
        col.addEventListener('dragstart', handleDragStart, false);
        col.addEventListener('dragenter', handleDragEnter, false)
        col.addEventListener('dragover', handleDragOver, false);
        col.addEventListener('dragleave', handleDragLeave, false);
        col.addEventListener('drop', handleDrop, false);
        col.addEventListener('dragend', handleDragEnd, false);
    });

    var cols = document.querySelectorAll('.target');
    [].forEach.call(cols, function (col) {
        col.addEventListener('dragstart', handleDragStart, false);
        col.addEventListener('dragenter', handleDragEnter, false)
        col.addEventListener('dragover', handleDragOver, false);
        col.addEventListener('dragleave', handleDragLeave, false);
        col.addEventListener('drop', handleDrop, false);
        col.addEventListener('dragend', handleDragEnd, false);
    });



</script>
